Create a fully functional Task Manager application with role-based access control and dynamic UI based on user roles. Design should be modern, professional, and inspired by the Emmadi dashboard reference (Image 1).
Core Functionality Requirements:

Authentication & Role System:

Implement role-based login (Manager, Creative Team, DM Team)
User session management
Role-specific UI rendering
Current user display in header (e.g., "Hello, Sravan ðŸ‘‹")


Role-Based Actions:

Manager Role: Display "Approve" (green checkmark) and "Reject" (red X) buttons
Creative/DM Team Roles: Display "Send for Approval" button (yellow/gold)
Dynamically show/hide action buttons based on logged-in user role
Update task status when actions are performed


Task Management Features:

Create new tasks with form modal
Filter tasks by status (Approvals dropdown)
Search tasks functionality
View toggle (list/grid/calendar/download)
Task status updates in real-time


Dashboard Stats (Top Cards):

Tasks Pending: Dynamic count
In Approval: Dynamic count
Open Tasks: Dynamic count with M/K formatting
Completed Tasks: Dynamic count
Each card shows +150% growth indicator with trend icon
Real-time updates when task status changes


Task Table Columns:

Sent by (user name/role)
Requirement (task title + category)
Branch specific? (location)
Creative/Video (media type)
Format (dimensions)
Event based? (YES/NO)
Output (thumbnail preview)
Actions (role-based buttons)


Task Status Workflow:

Pending â†’ In Approval (when "Send for Approval" clicked)
In Approval â†’ Completed (when "Approve" clicked)
In Approval â†’ Rejected (when "Reject" clicked)
Update statistics automatically on status change


Sidebar Navigation:

Dashboard icon
Task Manager (active state)
Social Tracker
Content Planner
Other relevant icons
Settings at bottom
Logout functionality
User profile section (John Doe - Manager)



Design Requirements:

Visual Style (Inspired by Image 1 - Emmadi):

Clean, professional interface with excellent spacing
White/light background with subtle borders
Green primary color (#059669 or similar emerald)
Sidebar: Light background with hover states
Typography: Clear hierarchy with proper font weights


Stats Cards:

White cards with subtle shadows
Large bold numbers
Small descriptive labels
Icon indicators (grid, clock, info, checkmark)
Green growth percentages with trend icons
Rounded corners (lg)
Hover lift effect


Table Design:

Clean white background
Proper column alignment
Row hover states (subtle gray)
Badge styling for status, priority, categories
Avatar circles for assignees
Progress bars for completion percentage
Thumbnail previews in Output column
Three-dot menu for additional actions


Action Buttons:

Approve Button: Green circular icon with checkmark
Reject Button: Red circular icon with X
Send for Approval Button: Gold/yellow rectangular button with text
Hover states with scale effect
Loading states during action processing


Search & Filter Bar:

Search input with icon
Filter dropdown (funnel icon)
View toggle buttons (list, grid, calendar, download)
Proper spacing and alignment


Responsive Design:

Collapsible sidebar on mobile
Stacked cards on smaller screens
Horizontal scroll for table on mobile
Touch-friendly button sizes



Technical Implementation:

State Management:

Use React useState/useReducer for task data
Manage user role state
Track filter and search states
Handle modal open/close states


Data Structure:

javascriptconst tasks = [
  {
    id: 1,
    sentBy: "Pradeep",
    role: "Creative Team",
    requirement: "New store awareness",
    category: "Campaign",
    branch: "Bhimavaram",
    mediaType: "Video",
    format: "1350 * 1080 PX",
    eventBased: "NO",
    output: "thumbnail_url",
    status: "pending", // pending, in_approval, approved, rejected
    priority: "high",
    assignee: "Sarah Chen",
    dueDate: "2025-02-08",
    progress: 90
  }
]

Functions to Implement:

handleApprove(taskId) - Updates status to approved
handleReject(taskId) - Updates status to rejected
handleSendForApproval(taskId) - Updates status to in_approval
handleCreateTask(taskData) - Adds new task
handleSearch(query) - Filters tasks
handleStatusFilter(status) - Filters by status
calculateStats() - Updates dashboard cards


Role-Based Rendering:

javascriptconst renderActions = (task, userRole) => {
  if (userRole === 'manager' && task.status === 'in_approval') {
    return <ApproveRejectButtons />
  } else if (['creative', 'dm'].includes(userRole) && task.status === 'pending') {
    return <SendForApprovalButton />
  }
}
Additional Features:

Task detail modal on row click
Bulk actions (select multiple tasks)
Sort by column headers
Export to CSV functionality
Notification toast on successful actions
Confirmation dialog for reject action
Task comments/notes section
Attachment preview
Due date highlighting (overdue in red)
Filter by priority, branch, assignee

Animation & Interactions:

Smooth transitions on status changes
Loading spinner during actions
Success/error toast notifications
Card hover elevation
Button hover states
Skeleton loading for initial data fetch
Fade-in for new tasks

Make this a production-ready, fully functional task management system with clean code, proper component structure, and excellent user experience. All interactions should work seamlessly with proper error handling and loading states.